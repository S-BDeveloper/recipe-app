name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 2 * * 1" # Weekly on Monday at 2 AM

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint security rules
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets in code
        run: |
          # Check for common secret patterns
          if grep -r "password\|secret\|key\|token" src/ --exclude="*.test.*" --exclude="*.spec.*" | grep -v "example\|test\|mock"; then
            echo "Potential secrets found in code"
            exit 1
          fi

      - name: Check for hardcoded API keys
        run: |
          # Check for Firebase config patterns
          if grep -r "AIza" src/ --exclude="*.test.*" --exclude="*.spec.*"; then
            echo "Potential Firebase API key found"
            exit 1
          fi

      - name: Check for environment variable usage
        run: |
          # Ensure environment variables are used properly
          if grep -r "process.env" src/ | grep -v "VITE_"; then
            echo "Non-Vite environment variables found"
            exit 1
          fi

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        run: npm outdated

      - name: Check for vulnerable dependencies
        run: npm audit --audit-level=high

      - name: Generate dependency report
        run: npm list --depth=0 > dependency-report.txt

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency-report.txt

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          args: --only-verified --fail

      - name: Check for common secret patterns
        run: |
          # Check for various secret patterns
          patterns=(
            "sk_live_[0-9a-zA-Z]{24}"
            "sk_test_[0-9a-zA-Z]{24}"
            "pk_live_[0-9a-zA-Z]{24}"
            "pk_test_[0-9a-zA-Z]{24}"
            "AIza[0-9A-Za-z\\-_]{35}"
            "[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com"
            "ya29\\.[0-9A-Za-z\\-_]+"
            "AIza[0-9A-Za-z\\-_]{35}"
            "AKIA[0-9A-Z]{16}"
            "[0-9a-zA-Z/+]{40}"
          )

          for pattern in "${patterns[@]}"; do
            if grep -r "$pattern" . --exclude-dir=node_modules --exclude-dir=.git; then
              echo "Potential secret found with pattern: $pattern"
              exit 1
            fi
          done

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check, codeql-analysis, secret-scanning]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "" >> security-report.md

          echo "## Scan Results" >> security-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> security-report.md
          echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-report.md

          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "1. Review any failed checks above" >> security-report.md
          echo "2. Update dependencies if vulnerabilities found" >> security-report.md
          echo "3. Address any security warnings" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
